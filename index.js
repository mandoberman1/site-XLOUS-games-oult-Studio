const express = require('express');
const fs = require('fs');
const ejs = require('ejs');
const app = express();
const nodemailer = require('nodemailer');
const { v4: uuidv4 } = require('uuid');
const bcrypt = require('bcrypt');
const session = require('express-session');

const USERS_FILE = './users.json';
app.set('view engine', 'ejs');
app.set('trust proxy', true);
app.use(express.urlencoded({ extended: false }));
app.use(express.static('static'));
app.use(session({
    secret: process.env.SESSION_SECRET || 'keyboard cat',
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false } // –í Railway –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å true —Å HTTPS
}));

const COMMENTS_FILE = './comments.txt';
const routes = {
    'murder': { view: 'murder', title: 'Murder Time' },
    'bertatap': { view: 'bertatap', title: 'Bezhik-Tap' },
};
function readUsers() {
    if (!fs.existsSync(USERS_FILE)) return [];
    try {
        const data = fs.readFileSync(USERS_FILE, 'utf8');
        return JSON.parse(data);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users:', err);
        return [];
    }
}

function saveUsers(users) {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2), 'utf8');
}

// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø–∏—Å—å–º–∞ ‚Äî —É–∫–∞–∂–∏ —Å–≤–æ—é –ø–æ—á—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, Gmail SMTP)
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL,        // –£–∫–∞–∂–∏ –≤ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        pass: process.env.EMAIL_PASS,   // –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Gmail
    }
});

// üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.post('/register', async (req, res) => {
    const { email, Password, "Con-Password": confirmPassword } = req.body;
    if (!email || !Password || Password !== confirmPassword) {
        flash = "–û—à–∏–±–∫–∞: –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ";
        return res.redirect(url);
    }

    const users = readUsers();
    if (users.find(u => u.email === email)) {
        flash = "Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω";
        return res.redirect(url);
    }

    const hashedPassword = await bcrypt.hash(Password, 10);
    const verifyToken = uuidv4();

    const newUser = {
        email,
        password: hashedPassword,
        verified: false,
        token: verifyToken
    };

    users.push(newUser);
    saveUsers(users);

    const link = `https://${req.headers.host}/verify?token=${verifyToken}`;
    await transporter.sendMail({
        from: `"Railway Auth" <${process.env.EMAIL}>`,
        to: email,
        subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        html: `<p>–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ: <a href="${link}">${link}</a></p>`
    });

    flash = "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.";
    res.redirect(url);
});

// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã
app.get('/verify', (req, res) => {
    const { token } = req.query;
    const users = readUsers();
    const user = users.find(u => u.token === token);

    if (!user) {
        return res.send('–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞');
    }

    user.verified = true;
    user.token = null;
    saveUsers(users);

    res.send('Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.');
});
function readComments() {
    if (!fs.existsSync(COMMENTS_FILE)) return [];
    try {
        const data = fs.readFileSync(COMMENTS_FILE, 'utf8');
        return JSON.parse(data);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err);
        return [];
    }
}

function saveComment(comment) {
    const comments = readComments();
    comments.push(comment);
    fs.writeFileSync(COMMENTS_FILE, JSON.stringify(comments, null, 2), 'utf8');
}

app.get('/', (req, res) => {
    res.render('index');
});

app.get('/favicon.ico', (req, res) => res.status(204).end());

let url;
let flash;

app.get('/:url', (req, res) => {
    url = req.params.url;
    const route = routes[url];

    if (!route) {
        return res.status(404).send('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const title = route.title;
    const body = fs.readFileSync(`views/${url}.ejs`, 'utf-8');
    const base = fs.readFileSync(`views/base.ejs`, 'utf-8');
    const ip = req.ip;

    console.log(ip);

    const comments = readComments();
    const html = ejs.render(base, {
        title,
        body,
        comments,
        length: comments.length,
        flash: flash || ' –Ω–µ—Ç',
        user: req.session.user
    });

    flash = '';
    res.send(html);
});
app.post('/login', async (req, res) => {
    const { email, Password } = req.body;
    const users = readUsers();
    const user = users.find(u => u.email === email);

    if (!user) {
        flash = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
        return res.redirect(url);
    }

    if (!user.verified) {
        flash = 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω';
        return res.redirect(url);
    }

    const match = await bcrypt.compare(Password, user.password);
    if (!match) {
        flash = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';
        return res.redirect(url);
    }

    req.session.user = { email: user.email };
    flash = `–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ ${user.email}`;
    res.redirect(url);
});

app.post('/add', (req, res) => {
    const ip = req.ip;
    const { username, comment } = req.body;

    if (!username || !comment) {
        flash = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è";
        return res.redirect(url);
    }

    const newComment = { username, comment, ip };
    saveComment(newComment);
    flash = "–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π";
    res.redirect(url);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});
